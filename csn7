#! /usr/bin/env lua

-- Copyright (c) 2024 <dev@brigid.jp>
-- This software is released under the MIT License.
-- https://opensource.org/licenses/mit-license.php

local brigid = require "brigid"
brigid.dlopen_self()

local unpack = table.unpack or unpack

----------------------------------------------------------------------

-- https://www.iana.org/assignments/media-types/media-types.xhtml
local media_types = {
  json = "application/json";
  urlencoded = "application/x-www-form-urlencoded";
  jpeg = "image/jpeg";
  png = "image/png";
  webp = "image/webp";
}

local bsky_url = "https://bsky.social/xrpc"
local slack_url = "https://slack.com/api"

----------------------------------------------------------------------

local function read_contents(path)
  local handle, message = io.open(path, "rb")
  if not handle then
    return handle, message
  end

  local contents = handle:read "*a"
  handle:close()
  return contents
end

local function read_json(path)
  local result , message = read_contents(path)
  if not result then
    return result, message
  end
  return brigid.json.parse(result)
end

local function stringify_json(data)
  return tostring(brigid.data_writer():write_json(data))
end

----------------------------------------------------------------------

--[=[
local function parse_text(source)
  local reply
  local quote
  local images
  local buffer = {}

  for i, line in ipairs(source) do
    local processed
    local command, tail = line:match "^!([@>[])(.+)$"
    if i then
      if command == "[" then
        -- ![text](path)
        local text, path = tail:match "([^%]]*)%]%(([^)]+)%)$"
        if text then
          local image = {
            text = text;
            path = path;
          }
          if images then
            images[#images + 1] = image
          else
            images = { image }
          end
          processed = true
        end
      elseif command == "@" then
        -- !@repo/rkey
        local repo, rkey = tail:match "([0-9A-Za-z%-]+%.bsky%.social).*/([2-7a-z]+)$"
        if repo then
          reply = {
            repo = repo;
            rkey = rkey;
          }
          processed = true
        end
      elseif command == ">" then
        -- !>repo/rkey
        local repo, rkey = tail:match "([0-9A-Za-z%-]+%.bsky%.social).*/([2-7a-z]+)$"
        if repo then
          quote = {
            repo = repo;
            rkey = rkey;
          }
          processed = true
        end
      end
    end

    if not processed then
      local p = 1
      while true do
        local i, j, text, command = line:find("^(.-)([[<@#])", p)
        if not i then
          break
        end
        if text ~= "" then
          buffer[#buffer + 1] = { text = text }
        end
        p = j + 1

        if command == "[" then
          -- [text](link)
          local i, j, text, link = line:find("^(.-)%]%((.-)%)", p)
          if i then
            if text == "" then
              text = link
            end
            buffer[#buffer + 1] = {
              text = text;
              feature = {
                ["$type"] = "app.bsky.richtext.facet#link";
                uri = link;
              };
            }
            p = j + 1
          else
            buffer[#buffer + 1] = { text = "[" }
          end
        elseif command == "<" then
          -- <link>
          local i, j, link = line:find("^(.-)>", p)
          if i then
            buffer[#buffer + 1] = {
              text = link;
              feature = {
                ["$type"] = "app.bsky.richtext.facet#link";
                uri = link;
              };
            }
            p = j + 1
          else
            buffer[#buffer + 1] = { text = "<" }
          end
        elseif command == "@" then
          -- @mention
          local i, j, mention = line:find("^([^[<@#%s]+)", p)
          if i then
            buffer[#buffer + 1] = {
              text = "@"..mention;
              feature = {
                ["$type"] = "app.bsky.richtext.facet#mention";
                did = mention;
              };
            }
            p = j + 1
          else
            buffer[#buffer + 1] = { text = "@" }
          end
        elseif command == "#" then
          -- #tag
          local i, j, tag = line:find("^([^[<@#%s]+)", p)
          if i then
            buffer[#buffer + 1] = {
              text = "#"..tag;
              feature = {
                ["$type"] = "app.bsky.richtext.facet#tag";
                tag = tag;
              };
            }
            p = j + 1
          else
            buffer[#buffer + 1] = { text = "#" }
          end
        end
      end

      if p <= #line then
        buffer[#buffer + 1] = { text = line:sub(p) }
      end
      buffer[#buffer + 1] = { text = "\n" }
    end
  end

  for i = #buffer, 1, -1 do
    local v = buffer[i]
    if not v.feature and v.text:find "^%s*$" then
      buffer[i] = nil
    else
      break
    end
  end

  local data_writer = brigid.data_writer()
  local facets
  for i, v in ipairs(buffer) do
    if v.feature then
      local n = #data_writer
      local facet = {
        index = {
          byteStart = n;
          byteEnd = n + #v.text;
        };
        features = { v.feature };
      }
      if facets then
        facets[#facets + 1] = facet
      else
        facets = { facet }
      end
    end
    data_writer:write(v.text)
  end

  return {
    reply = reply;
    quote = quote;
    images = images;
    text = data_writer;
    facets = facets;
  }
end
]=]

----------------------------------------------------------------------

local class = {}
local metatable = { __index = class }

function class.new(config)
  local self = setmetatable({ config = config }, metatable)
  self.http_session = brigid.http_session {
    header = function (code, header)
      self.response.code = code
      self.response.header = header
    end;
    write = function (out)
      self.response.data_writer:write(out)
    end;
  }
  return self
end

function class:debug(...)
  if self.config.debug then
    local debug_path = self.config.data_dirpath..os.date "/%Y-%m-%d.log"
    if self.debug_path ~= debug_path then
      self.debug_path = debug_path
      if self.debug_handle then
        self.debug_handle:close()
      end
      self.debug_handle = assert(io.open(debug_path, "ab"))
    end

    local out = self.debug_handle
    for i, v in ipairs {...} do
      if i > 1 then
        out:write "\t"
      end
      out:write(tostring(v))
    end
    out:write "\n"
  end
end

function class:warn(...)
  io.stderr:write(table.concat({...}, "\t"), "\n")
end

function class:make_header(source, content_type)
  local result = {
    ["User-Agent"] = self.config.ua;
    ["Content-Type"] = content_type;
  }
  for k, v in pairs(source) do
    result[k] = v
  end
  return result
end

function class:request(method, url, header, data)
  self.response = { data_writer = brigid.data_writer() }

  local result, message = self.http_session:request {
    method = method;
    url = url;
    header = header;
    data = data;
  }
  if not result then
    return result, message
  end

  if self.config.debug then
    self:debug(stringify_json(self.response))
  end

  return self.response
end

function class:get_session_path(name)
  return self.config.data_dirpath.."/session-"..name..".json"
end

function class:save_session(name, data)
  local writer, message = brigid.file_writer(self:get_session_path(name))
  if not writer then
    return writer, message
  end
  return writer:write(data):close()
end

function class:load_session(name)
  local session, message = read_json(self:get_session_path(name))
  if not session then
    return session, message
  end
  self.session = session
  return session
end

----------------------------------------------------------------------

function class:get_record(repo, rkey)
  local url = brigid.data_writer()
    :write(bsky_url)
    :write "/com.atproto.repo.getRecord"
    :write "?repo="
    :write_urlencoded(repo)
    :write "&collection=app.bsky.feed.post"
    :write "&rkey="
    :write_urlencoded(rkey)
  local response, message = self:request("GET", tostring(url), self:make_header({
    Authorization = "Bearer "..self.session.accessJwt;
  }))
  if not response then
    return response, message
  end
  local result, message = brigid.json.parse(response.data_writer)
  if not result then
    return result, message
  end
  if response.code ~= 200 then
    return nil, result.error..": "..result.message
  end
  return result
end

----------------------------------------------------------------------

-- CommonMark
--   https://spec.commonmark.org/
-- GitHub Flavored Markdown
--   https://github.github.com/gfm/
-- Slack
--   https://api.slack.com/reference/surfaces/formatting

-- https://atproto.com/specs/handle
-- https://atproto.com/specs/record-key


function class:parse_text(source)
  local reply
  local quote
  local images
  local buffer = {}

  for i, line in ipairs(source) do
    local processed
    local command, tail = line:match "^!([@>[])(.+)$"
    if i then
      if command == "[" then
        -- ![text](path)
        local text, path = tail:match "([^%]]*)%]%(([^)]+)%)$"
        if text then
          local image = {
            text = text;
            path = path;
          }
          if images then
            images[#images + 1] = image
          else
            images = { image }
          end
          processed = true
        end
      elseif command == "@" then
        -- !@repo/rkey
        local repo, rkey = tail:match "([0-9A-Za-z%-]+%.bsky%.social).*/([2-7a-z]+)$"
        if repo then
          local record, message = self:get_record(repo, rkey)
          if record then
            reply = {
              parent = {
                uri = record.uri;
                cid = record.cid;
              };
            }
            if record.value.reply then
              reply.root = record.value.reply.root
            else
              reply.root = reply.parent
            end
            processed = true
          else
            self:warn("cannot get_record: "..message)
          end
        end
      elseif command == ">" then
        -- !>repo/rkey
        local repo, rkey = tail:match "([0-9A-Za-z%-]+%.bsky%.social).*/([2-7a-z]+)$"
        if repo then
          local record, message = self:get_record(repo, rkey)
          if record then
            quote = {
              uri = record.uri;
              cid = record.cid;
            }
            processed = true
          else
            self:warn("cannot get_record: "..message)
          end
        end
      end
    end

    if not processed then
      local p = 1
      while true do
        local i, j, text, command = line:find("^(.-)([[<@#])", p)
        if not i then
          break
        end
        if text ~= "" then
          buffer[#buffer + 1] = { text = text }
        end
        p = j + 1

        if command == "[" then
          -- [text](link)
          local i, j, text, link = line:find("^(.-)%]%((.-)%)", p)
          if i then
            if text == "" then
              text = link
            end
            buffer[#buffer + 1] = {
              text = text;
              feature = {
                ["$type"] = "app.bsky.richtext.facet#link";
                uri = link;
              };
            }
            p = j + 1
          else
            buffer[#buffer + 1] = { text = "[" }
          end
        elseif command == "<" then
          -- <link>
          local i, j, link = line:find("^(.-)>", p)
          if i then
            buffer[#buffer + 1] = {
              text = link;
              feature = {
                ["$type"] = "app.bsky.richtext.facet#link";
                uri = link;
              };
            }
            p = j + 1
          else
            buffer[#buffer + 1] = { text = "<" }
          end
        elseif command == "@" then
          -- @mention
          local i, j, mention = line:find("^([^[<@#%s]+)", p)
          if i then
            buffer[#buffer + 1] = {
              text = "@"..mention;
              feature = {
                ["$type"] = "app.bsky.richtext.facet#mention";
                did = mention;
              };
            }
            p = j + 1
          else
            buffer[#buffer + 1] = { text = "@" }
          end
        elseif command == "#" then
          -- #tag
          local i, j, tag = line:find("^([^[<@#%s]+)", p)
          if i then
            buffer[#buffer + 1] = {
              text = "#"..tag;
              feature = {
                ["$type"] = "app.bsky.richtext.facet#tag";
                tag = tag;
              };
            }
            p = j + 1
          else
            buffer[#buffer + 1] = { text = "#" }
          end
        end
      end

      if p <= #line then
        buffer[#buffer + 1] = { text = line:sub(p) }
      end
      buffer[#buffer + 1] = { text = "\n" }
    end
  end

  for i = #buffer, 1, -1 do
    local v = buffer[i]
    if not v.feature and v.text:find "^%s*$" then
      buffer[i] = nil
    else
      break
    end
  end

  local data_writer = brigid.data_writer()
  local facets
  local trim = true
  for i, v in ipairs(buffer) do
    if v.feature then
      local n = #data_writer
      local facet = {
        index = {
          byteStart = n;
          byteEnd = n + #v.text;
        };
        features = { v.feature };
      }
      if facets then
        facets[#facets + 1] = facet
      else
        facets = { facet }
      end
      data_writer:write(v.text)
      trim = false
    else
      if not trim or not v.text:find "^%s*$" then
        data_writer:write(v.text)
        trim = false
      end
    end
  end

  return {
    reply = reply;
    quote = quote;
    images = images;
    text = data_writer;
    facets = facets;
  }
end

----------------------------------------------------------------------

local commands = {}

function commands:create_session(name)
  local cred = assert(self.config.bsky.credentials[name])

  local response = assert(self:request("POST", bsky_url.."/com.atproto.server.createSession", self:make_header({
  }, media_types.json), stringify_json {
    identifier = cred.identifier;
    password = cred.password;
  }))
  assert(response.code == 200)

  self.session = brigid.json.parse(response.data_writer)
  assert(self:save_session(name, response.data_writer))
end

function commands:refresh_session(name)
  local session = assert(self:load_session(name))

  local response = assert(self:request("POST", bsky_url.."/com.atproto.server.refreshSession", self:make_header {
    Authorization = "Bearer "..session.refreshJwt;
  }))
  assert(response.code == 200)

  self.session = brigid.json.parse(response.data_writer)
  assert(self:save_session(name, response.data_writer))
end

function commands:delete_session(name)
  local session = assert(self:load_session(name))

  local response = assert(self:request("POST", bsky_url.."/com.atproto.server.deleteSession", self:make_header {
    Authorization = "Bearer "..session.refreshJwt;
  }))
  assert(response.code == 200)
end

----------------------------------------------------------------------

function commands:get_profile(name, actor)
  local session = assert(self:load_session(name))
  if not actor then
    actor = self.config.bsky.credentials[name].identifier
  end

  local url = brigid.data_writer()
    :write(bsky_url)
    :write "/app.bsky.actor.getProfile"
    :write "?actor="
    :write_urlencoded(actor)
  local response = assert(self:request("GET", tostring(url), self:make_header({
    Authorization = "Bearer "..session.accessJwt;
  })))
  assert(response.code == 200)

  local r = assert(brigid.json.parse(response.data_writer))
  io.write(([[
did: %s
handle: %s
displayName: %s
description: %s
]]):format(r.did, r.handle, r.displayName, r.description))
end

function commands:get_author_feed(name, actor)
  local session = assert(self:load_session(name))
  if not actor then
    actor = self.config.bsky.credentials[name].identifier
  end

  local url = brigid.data_writer()
    :write(bsky_url)
    :write "/app.bsky.feed.getAuthorFeed"
    :write "?actor="
    :write_urlencoded(actor)
  local response = assert(self:request("GET", tostring(url), self:make_header({
    Authorization = "Bearer "..session.accessJwt;
  })))
  assert(response.code == 200)

  local r = assert(brigid.json.parse(response.data_writer))
  for i, v in ipairs(r.feed) do
    local record = v.post.record
    io.write(([[
post.cid: %s
post.uri: %s
createAt: %s
%s
]]):format(v.post.cid, v.post.uri, record.createdAt, record.text))
  end
end

function commands:get_record(name, rkey, repo)
  assert(self:load_session(name))
  if not repo then
    repo = self.config.bsky.credentials[name].identifier
  end
  local record = assert(self:get_record(repo, rkey))
  print(stringify_json(record))
end

----------------------------------------------------------------------

function commands:create_record(name)
  local session = assert(self:load_session(name))
  local text = io.read "*a"

  local record = {
    ["$type"] = "app.bsky.feed.post";
    text = text;
    createdAt = os.date "!%Y-%m-%dT%H:%M:%SZ";
  }

  local response = assert(self:request("POST", bsky_url.."/com.atproto.repo.createRecord", self:make_header({
    Authorization = "Bearer "..session.accessJwt;
  }, media_types.json), stringify_json {
    repo = self.config.bsky.credentials[name].identifier;
    collection = "app.bsky.feed.post";
    record = record;
  }))
  assert(response.code == 200)
end

----------------------------------------------------------------------

function commands:parse_text(name)
  assert(self:load_session(name))
  local lines = {}
  for line in io.lines() do
    lines[#lines + 1] = line
  end
  print(stringify_json(self:parse_text(lines)))
end

----------------------------------------------------------------------

function commands:slack(name, channel, username, iconname)
  local app = assert(self.config.slack.apps[name])
  local text = io.read "*a"

  assert(self:request("POST", slack_url.."/chat.postMessage", self:make_header({
    Authorization = "Bearer "..app.oauth_token;
  }, media_types.json), stringify_json {
    token = app.oauth_token;
    channel = assert(channel);
    blocks = {
      {
        type = "section";
        text = {
          type = "mrkdwn";
          text = text;
        };
      };
    };
    username = username;
    icon_url = self.config.icons[iconname];
  }))
end

----------------------------------------------------------------------

local home = os.getenv "HOME"
if not home then
  -- Windowsの場合
  home = assert(os.getenv "HOMEDRIVE")..assert(os.getenv "HOMEPATH")
end
local config_path = home.."/.csn7rc"
local config = read_json(config_path) or {}

if not config.data_dirpath then
  config.data_dirpath = home.."/.csn7"
end
brigid.mkdir(config.data_dirpath)

local self = class.new(config)

----------------------------------------------------------------------

local command = assert(commands[arg[1]])
command(self, unpack(arg, 2))

